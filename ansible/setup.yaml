- name: Install requirements
  hosts: ubuntu-rpi
  vars:
    
  vars_files: # to be inserted into templates
    - secrets.yaml 
    - aws_secrets.yaml
  tasks:

  - name: install pip3 and awscli
    become: yes
    apt: 
      name: "{{ item }}"
      state: present 
    loop:
      - python3-pip
      - awscli

  - name: Install pip packages
    become: yes
    ansible.builtin.pip:
      name: "{{ item }}"
    loop:
      - docker
      - docker-compose
      - boto3
  
  - name: Create directories if they do not already exist
    ansible.builtin.file:
      path: '/home/ansible-ssh/{{ item }}'
      state: directory
      mode: '0755'
    loop:
      - ansible
      - ansible/zigbee2mqtt-data
      - ansible/mosquitto
      - ansible/mosquitto/data
      - ansible/mosquitto/log
      - ansible/mosquitto/config
      - ansible/grafana
      - ansible/grafana/dashboards
      - ansible/grafana/datasources

  - name: copy files to server
    copy:
      src: config-files/{{ item.src }}
      dest: /home/ansible-ssh/ansible/{{ item.dest }}
    loop:
      - { src: docker-compose.yml, dest: docker-compose.yml }
      - { src: mosquitto.conf, dest: mosquitto/config/mosquitto.conf }
      - { src: grafana/dashboard.yaml, dest: grafana/dashboard.yaml }
      - { src: grafana/dashboards/main-dashboard.json, dest: grafana/dashboards/main-dashboard.json }


  - name: copy zigbee2mqtt and cron templates
    template:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
    loop:
      - { src: config-files/configuration.yaml.j2, dest: /home/ansible-ssh/ansible/zigbee2mqtt-data/configuration.yaml }
      - { src: config-files/backup-cron.sh.j2, dest: /home/ansible-ssh/ansible/backup-cron.sh }
      - { src: config-files/grafana/datasources/influxdb.yaml.j2, dest: /home/ansible-ssh/ansible/grafana/datasources/influxdb.yaml }

  - name: Backup homeassistant to S3 at 4am daily
    ansible.builtin.cron:
      name: "homeassistant s3 backup"
      minute: "0"
      hour: "4"
      job: "sudo /home/ansible-ssh/ansible/backup-cron.sh >/dev/null 2>&1"

  - name: Setup SSH rate limiting
    become: yes
    community.general.ufw:
      rule: limit
      port: ssh
      proto: tcp

  - name: Allow all access to tcp ports
    become: yes
    community.general.ufw:
      rule: allow
      port: '{{ item }}'
      proto: tcp
    loop:
      - 8080 # zigbee2mqtt
      - 9000 # portainer
      - 1883 # mqtt
      - 9001 # mqtt
      - 8123 # homeassistant
      - 8086 # Influxdb
      - 3000 # Grafana

  - name: Reload firewall
    become: yes
    community.general.ufw:
      state: reloaded